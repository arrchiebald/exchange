import telebot
import gspread
import sqlalchemy
import schedule
import json
from time import sleep
from threading import Thread
from datetime import datetime
from models import Users, UserHistory, ApplicationsSell, ApplicationsBuy, Base, Session
from random import randint
from telebot import types

bot = telebot.TeleBot('6250800326:AAEgBf4F8ET3UKDVvajZKI6tlRHEihMWP3Q')
gc = gspread.service_account(filename='exchange-384915-7fec015fbe08.json')
engine = sqlalchemy.create_engine('postgresql+psycopg2://jgsqklcsypqoky:091e08d9f3b9b038b1c8b1662a34b2bed42c52d2fc6baf6f6809f0a63712ca7b@ec2-3-248-141-201.eu-west-1.compute.amazonaws.com:5432/d6l089hfn0o91n')
Session = sqlalchemy.orm.sessionmaker(bind=engine)

banks_sell_calldata = {'monobank_sell': '–ú–æ–Ω–æ–±–∞–Ω–∫', 'privatbank_sell': '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫',  'pumb_sell': '–ü–£–ú–ë', 'else_sell': '–î—Ä—É–≥–æ–µ'}
banks_buy_calldata = {'monobank_buy': '–ú–æ–Ω–æ–±–∞–Ω–∫', 'privatbank_buy': '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫',  'pumb_buy': '–ü–£–ú–ë', 'else_buy': '–î—Ä—É–≥–æ–µ'}
sh = gc.open('–†–µ—Å—É—Ä—Å—ã –¥–ª—è –±–æ—Ç–∞')

admins_chat_id = ['5518462737']
users_status_sell = []
user_confirmations_status_sell = []
users_status_buy = []
user_confirmations_status_buy = []

Base.metadata.create_all(engine)

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    text = '*–ü—Ä–∏–≤–µ—Çüëã* \n–≠—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–¥–Ω–æ–π –ø—Ä–æ—Å—Ç–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π, –±—ã—Å—Ç—Ä—ã–π –∏ –≤—ã–≥–æ–¥–Ω—ã–π –æ–±–º–µ–Ω –≤–∞—à–µ–π –≥—Ä–∏–≤–Ω—ã –Ω–∞ USDT –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç'
    with Session() as session:
        user_list = session.query(Users).all()
        if message.from_user.id not in [user_id.id for user_id in user_list]:
            new_user = Users(id=message.from_user.id, 
                            username=message.from_user.username, 
                            first_name=message.from_user.first_name, 
                            last_name=message.from_user.last_name
                            )
            user_history = UserHistory(
                id=message.from_user.id 
            )
            session.add(new_user)
            session.add(user_history)
            session.commit()
            bot.send_message(message.chat.id, text, parse_mode='Markdown')
    select_action(message)

# –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
def select_action(message):
    text_to_user = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å'
    markup = types.InlineKeyboardMarkup(row_width=1)
    sell_btn = types.InlineKeyboardButton('–Ø —Ö–æ—á—É –∫—É–ø–∏—Ç—å USDT', callback_data='sell_btn')
    buy_btn = types.InlineKeyboardButton('–Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å USDT', callback_data='buy_btn')
    markup.add(sell_btn, buy_btn)
    bot.send_message(message.chat.id, text_to_user, reply_markup=markup)

# Callbacks

@bot.callback_query_handler(func=lambda call: True)
def action(call):
    markup = types.InlineKeyboardMarkup(row_width=1)
        
    # –ü—Ä–æ–¥–∞–∂–∞ USDT    
    if call.data == 'sell_btn':
        ok_btn = types.InlineKeyboardButton('OK', callback_data='ok_sell')
        back_btn = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='back')
        markup.add(ok_btn, back_btn)
        text = f'–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {sh.sheet1.get("B2")[0][0]} –∑–∞ 1 USDT'
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

    elif call.data == 'ok_sell':
        banks = {
            '–ú–æ–Ω–æ–±–∞–Ω–∫': 'monobank_sell',
            '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫': 'privatbank_sell', 
            '–ü–£–ú–ë': 'pumb_sell', 
            '–î—Ä—É–≥–æ–µ': 'else_sell', 
                  }
        
        for bank_key, bank_value in banks.items():
                user_bank = types.InlineKeyboardButton(bank_key, callback_data=bank_value)
                markup.add(user_bank)

        back = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='sell_btn')
        markup.add(back)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è'
        bot.edit_message_text(text=text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

    elif call.data in ['monobank_sell', 'privatbank_sell', 'pumb_sell', 'else_sell']:
        with Session() as session:
            last_choice = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            last_choice.last_bank = call.data
            session.commit()
            markup = types.InlineKeyboardMarkup(row_width=1)
            usdt_btn_choice = types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –≤ USDT', callback_data='usdt_choice_sell')
            uah_btn_choice = types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –≤ UAH', callback_data='uah_choice_sell')
            markup.add(usdt_btn_choice, uah_btn_choice)
            text = '–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?'
            bot.edit_message_text(text=text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    
    elif call.data == 'usdt_choice_sell':
        with Session() as session:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            last_choice = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            if last_choice.last_request_usdt_sell:
                markup.add(types.KeyboardButton(last_choice.last_request_usdt_sell))
            text = '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ USDT –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å'
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
            bot.register_next_step_handler(call.message, enter_usdt_sell)

    elif call.data == 'uah_choice_sell':
        with Session() as session:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            last_choice = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            if last_choice.last_request_uah_sell:
                markup.add(types.KeyboardButton(last_choice.last_request_uah_sell))
            text = '–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ UAH, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å'
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
            bot.register_next_step_handler(call.message, enter_uah_sell)
    
    elif call.data == 'confirm_sell':
        markup = types.ReplyKeyboardRemove()
        text = '–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —á—Ç–æ —è –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∏–∂–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏üëá'
        bot.delete_message(chat_id=call.message.chat.id,  message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, text, reply_markup=markup)
        requisites_uah(call.message)

    elif call.data == 'confirmed_uah_transfer':
        for user_status in users_status_sell:
            if str(call.message.from_user.id) in user_status:
                user_status_index = users_status_sell.index(user_status)
                users_status_sell.pop(user_status_index)
                break
        with Session() as session:
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ')
            id_application = randint(1000000, 9999999)
            applications = session.query(ApplicationsSell).all()
            application_sell_list = [application.id for application in applications]
            if id_application in application_sell_list:
                while id_application not in application_sell_list:
                    id_application = randint(1000000, 9999999)
            user_history = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            last_request_uah = user_history.last_request_uah_sell.replace(',', '.')
            exchange_rate = sh.sheet1.get('B2')[0][0].replace(',', '.')
            text = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT #{id_application}*
–ë–∞–Ω–∫: *{banks_sell_calldata.get(user_history.last_bank)}*
–ö–æ—à–µ–ª—ë–∫: `{user_history.last_trc20_wallet}`
–ö—É—Ä—Å: *{sh.sheet1.get('B2')[0][0]}*
–°—É–º–º–∞ –≤ UAH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: *{user_history.last_request_uah_sell}*.
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: *{round(float(last_request_uah) / float(exchange_rate), 2)}*
        '''
            for admin_chat_id in admins_chat_id:
                bot.send_message(admin_chat_id, text, parse_mode='Markdown')
            bot.register_next_step_handler(call.message, handle_uah, id_application=id_application)

    elif call.data[:23] == 'agree_transactions_sell':
        with Session() as session:
            db_id = session.query(ApplicationsSell).filter(ApplicationsSell.id==call.data[23:]).first()
            text = '–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –Ω–∞ –∫–æ—à–µ–ª—ë–∫. –û–±—ã—á–Ω–æ –æ–Ω–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 2-5 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ü§ô.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É'
            new_caption = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT #{db_id.id}*
–ë–∞–Ω–∫: *{db_id.bank}*
–ö–æ—à–µ–ª—ë–∫: `{db_id.wallet}`
–ö—É—Ä—Å: *{db_id.usdt_rate}*
–°—É–º–º–∞ –≤ UAH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: *{db_id.uah_amount}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: *{db_id.usdt_amount}*
\n\n*–ó–ê–Ø–í–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê* 
        '''
            with open('order_sell_chat_id.json', 'r') as f:
                data = json.load(f)
                chat_id = data[str(db_id.id)].split()
            for i in range(len(admins_chat_id)):
                bot.edit_message_caption(chat_id=admins_chat_id[i], message_id=chat_id[i], caption=new_caption, parse_mode='Markdown')
            data.pop(str(db_id.id))
            with open('order_sell_chat_id.json', 'w') as delete_id:
                json.dump(data, delete_id)
            bot.send_message(db_id.user_id, text)
            db_id.status = 'approved'
            session.commit()

    elif call.data[:24] == 'reject_transactions_sell':   
        with Session() as session:
            db_id = session.query(ApplicationsSell).filter(ApplicationsSell.id==call.data[24:]).first()
            text = f'–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∑–∞—è–≤–∫–∏ ‚Ññ{call.data[24:]}'
            bot.send_message(call.message.chat.id, text)
            new_caption = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT #{db_id.id}*
–ë–∞–Ω–∫: *{db_id.bank}*
–ö–æ—à–µ–ª—ë–∫: `{db_id.wallet}`
–ö—É—Ä—Å: *{db_id.usdt_rate}*
–°—É–º–º–∞ –≤ UAH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: *{db_id.uah_amount}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: *{db_id.usdt_amount}*
\n\n*–ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê* 
        '''
            with open('order_sell_chat_id.json', 'r') as f:
                data = json.load(f)
                chat_id = data[str(db_id.id)].split()
            for i in range(len(admins_chat_id)):
                bot.edit_message_caption(chat_id=admins_chat_id[i], message_id=chat_id[i], caption=new_caption, parse_mode='Markdown')
            data.pop(str(db_id.id))
            with open('order_sell_chat_id.json', 'w') as delete_id:
                json.dump(data, delete_id)
            bot.register_next_step_handler(call.message, reject_reason_sell, reason=call.data[24:])

    # –ü–æ–∫—É–ø–∫–∞ USDT

    elif call.data == 'buy_btn':
        ok_btn = types.InlineKeyboardButton('OK', callback_data='ok_buy')
        back_btn = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='back')
        markup.add(ok_btn, back_btn)
        text = f'–ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {sh.sheet1.get("A2")[0][0]} –∑–∞ 1 USDT'
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

    elif call.data == 'ok_buy':
        banks = {
            '–ú–æ–Ω–æ–±–∞–Ω–∫': 'monobank_buy',
            '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫': 'privatbank_buy', 
            '–ü–£–ú–ë': 'pumb_buy', 
            '–î—Ä—É–≥–æ–µ': 'else_buy', 
                  }

        for bank_key, bank_value in banks.items():
            user_bank = types.InlineKeyboardButton(bank_key, callback_data=bank_value)
            markup.add(user_bank)

        back = types.InlineKeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥', callback_data='buy_btn')
        markup.add(back)
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å UAH'
        bot.edit_message_text(text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)    

    elif call.data in ['monobank_buy', 'privatbank_buy', 'pumb_buy', 'else_buy']:
        with Session() as session:
            last_choice = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            last_choice.last_bank = call.data
            session.commit()
            markup = types.InlineKeyboardMarkup(row_width=1)
            usdt_btn_choice = types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –≤ USDT', callback_data='usdt_choice_buy')
            uah_btn_choice = types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –≤ UAH', callback_data='uah_choice_buy')
            markup.add(usdt_btn_choice, uah_btn_choice)
            text = '–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å USDT?'
            bot.edit_message_text(text=text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    
    elif call.data == 'usdt_choice_buy':
        with Session() as session:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            last_choice = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            if last_choice.last_request_usdt_buy:
                markup.add(types.KeyboardButton(last_choice.last_request_usdt_buy))
            text = '–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ USDT –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å'
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
            bot.register_next_step_handler(call.message, enter_usdt_buy)

    elif call.data == 'uah_choice_buy':
        with Session() as session:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            last_choice = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            if last_choice.last_request_uah_buy:
                markup.add(types.KeyboardButton(last_choice.last_request_uah_buy))
            text = '–£–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É UAH –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å USDT'
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(call.message.chat.id, text, reply_markup=markup)
            bot.register_next_step_handler(call.message, enter_uah_buy)

    elif call.data == 'confirm_buy':
        markup = types.ReplyKeyboardRemove()
        text = '–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ USDT TRC20 –Ω–∞ –∞–¥—Ä–µ—Å, —á—Ç–æ —è –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∏–∂–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏üëá'
        bot.delete_message(chat_id=call.message.chat.id,  message_id=call.message.message_id)
        bot.send_message(call.message.chat.id, text, reply_markup=markup)
        requisites_usdt(call.message)

    elif call.data == 'confirmed_usdt_transfer':
        for user_status in users_status_buy:
            if str(call.message.from_user.id) in user_status:
                user_status_index = users_status_buy.index(user_status)
                users_status_buy.pop(user_status_index)
                break
        with Session() as session:
            text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXid —Å–¥–µ–ª–∫–∏'
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text)
            id_application = randint(1000000, 9999999)
            applications = session.query(ApplicationsBuy).all()
            application_buy_list = [application.id for application in applications]
            if id_application in application_buy_list:
                while id_application not in application_buy_list:
                    id_application = randint(1000000, 9999999)
            user_history = session.query(UserHistory).filter(UserHistory.id==call.message.chat.id).first()
            last_request_usdt = user_history.last_request_usdt_buy.replace(',', '.')
            exchange_rate = sh.sheet1.get('A2')[0][0].replace(',', '.')
            text = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT #{id_application}*
–ë–∞–Ω–∫: *{banks_buy_calldata.get(user_history.last_bank)}*
–°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: `{user_history.last_card}`
–ö—É—Ä—Å: *{sh.sheet1.get('A2')[0][0]}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ USDT: *{last_request_usdt}*
–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ UAH: *{round(float(exchange_rate) * float(last_request_usdt), 2)}*
        '''
            for admin_chat_id in admins_chat_id:
                bot.send_message(admin_chat_id,  text, parse_mode='Markdown')
            bot.register_next_step_handler(call.message, handle_txid, id_application=id_application)

    elif call.data[:22] == 'agree_transactions_buy':
        with Session() as session:
            db_id = session.query(ApplicationsBuy).filter(ApplicationsBuy.id==call.data[22:]).first()
            text = '–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –Ω–∞ –∫–æ—à–µ–ª—ë–∫. –û–±—ã—á–Ω–æ –æ–Ω–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 2-5 –º–∏–Ω—É—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ü§ô.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É'
            new_text = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT #{db_id.id}*
–ë–∞–Ω–∫: *{db_id.bank}*
–ö–æ—à–µ–ª—ë–∫: `{db_id.credit_card}`
–ö—É—Ä—Å: *{db_id.usdt_rate}*
–°—É–º–º–∞ –≤ UAH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: *{db_id.usdt_amount}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: *{db_id.uah_summa}*
TXid —Å–¥–µ–ª–∫–∏: *{db_id.txid}*
\n\n*–ó–ê–Ø–í–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê* 
        '''
            with open('order_buy_chat_id.json', 'r') as f:
                data = json.load(f)
                chat_id = data[str(db_id.id)].split()
            for i in range(len(admins_chat_id)):
                bot.edit_message_text(chat_id=admins_chat_id[i], message_id=chat_id[i], text=new_text, parse_mode='Markdown')
            data.pop(str(db_id.id))
            with open('order_buy_chat_id.json', 'w') as delete_id:
                json.dump(data, delete_id)
            bot.send_message(db_id.user_id, text)
            db_id.status = 'approved'
            session.commit()

    elif call.data[:23] == 'reject_transactions_buy':
        with Session() as session:
            db_id = session.query(ApplicationsBuy).filter(ApplicationsBuy.id==call.data[23:]).first()
            text = f'–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∑–∞—è–≤–∫–∏ ‚Ññ{call.data[23:]}'
            new_text = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT #{db_id.id}*
–ë–∞–Ω–∫: *{db_id.bank}*
–ö–æ—à–µ–ª—ë–∫: `{db_id.credit_card}`
–ö—É—Ä—Å: *{db_id.usdt_rate}*
–°—É–º–º–∞ –≤ UAH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: *{db_id.usdt_amount}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: *{db_id.uah_summa}*
TXid —Å–¥–µ–ª–∫–∏: *{db_id.txid}*
\n\n*–ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê* 
        '''
            with open('order_buy_chat_id.json', 'r') as f:
                data = json.load(f)
                chat_id = data[str(db_id.id)].split()
            for i in range(len(admins_chat_id)):
                bot.edit_message_text(chat_id=admins_chat_id[i], message_id=chat_id[i], text=new_text, parse_mode='Markdown')
            data.pop(str(db_id.id))
            with open('order_buy_chat_id.json', 'w') as delete_id:
                json.dump(data, delete_id)
            bot.send_message(call.message.chat.id, text)
            bot.register_next_step_handler(call.message, reject_reason_buy, reason=call.data[23:])

    # Callback –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –≤ —Å—Ç–∞—Ä—Ç
    elif call.data == 'back':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        select_action(call.message)

# –ê–¥–º–∏–Ω–∫–∞

@bot.message_handler(commands=['admin'])
def auth_admin(message):
    if str(message.chat.id) not in [message_chat_id for message_chat_id in admins_chat_id]:
        text = '–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∞—Ä–æ–ª—å –æ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏'
        bot.send_message(message.chat.id, text)
        bot.register_next_step_handler(message, admin_panel)
    else:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')


def admin_panel(message):
    if message.text.replace(' ', '') == '123':
        admins_chat_id.append(str(message.chat.id))
        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–æ–ª—å')
    else:
        text = '–ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É'
        bot.send_message(message.chat.id, text)


def reject_reason_sell(message, reason):
    with Session() as session:
        applications = session.query(ApplicationsSell).filter(ApplicationsSell.id==reason).first()
        text = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞üëâ: <b>{message.text}</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @manager_ex4 –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ü§ô\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É'
        bot.send_message(applications.user_id, text, parse_mode='html')
        session.delete(applications)
        session.commit()


def reject_reason_buy(message, reason):
    with Session() as session:
        applications = session.query(ApplicationsBuy).filter(ApplicationsBuy.id==reason).first()
        text = f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞üëâ: <b>{message.text}</b>. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @manager_ex4 –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ü§ô\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É'
        bot.send_message(applications.user_id, text, parse_mode='html')
        session.delete(applications)
        session.commit()

# –ü–æ–∫—É–ø–∫–∞ USDT

def enter_usdt_sell(message):
    with Session() as session:
        if ' ' not in message.text:
            edited_text = message.text.replace(',', '.')
            text = message.text.replace(',', '.')
            if message.text.isdigit() or edited_text.count('.') == 1 and all(c.isdigit() for c in edited_text.replace('.', '', 1)):
                min_usdt = 100
                if float(edited_text) >= min_usdt:
                    user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    exchange_rate = sh.sheet1.get('B2')[0][0].replace(',', '.')
                    if user_history.last_trc20_wallet:
                        markup.add(types.KeyboardButton(user_history.last_trc20_wallet))
                    text = '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å USDT TRC20, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.'
                    bot.send_message(message.chat.id, text, reply_markup=markup)
                    bot.register_next_step_handler(message, send_request_confirmation_sell)
                    user_history.last_request_uah_sell = round(float(exchange_rate) * float(edited_text), 2)
                    user_history.last_request_usdt_sell = edited_text
                    session.commit()
                else:
                    text =  '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 100 USDT'
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, enter_usdt_sell)
            elif message.text == '/start':
                markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º...', reply_markup=markup)
                start(message)
                return
            else:
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑')
                bot.register_next_step_handler(message, enter_usdt_sell)
        else:
            text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            bot.send_message(message.chat.id, text)
            bot.register_next_step_handler(message, enter_usdt_sell)


def enter_uah_sell(message):
    with Session() as session:
        if ' ' not in message.text:
            user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
            edited_text = message.text.replace(',', '.')
            exchange_rate = sh.sheet1.get('B2')[0][0].replace(',', '.')
            if message.text.isdigit() or edited_text.count('.') == 1 and all(c.isdigit() for c in edited_text.replace('.', '', 1)):
                min_request = 100
                min_summa = round(min_request * float(exchange_rate), 2)
                if float(edited_text) >= min_summa:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    if user_history.last_trc20_wallet:
                        markup.add(types.KeyboardButton(user_history.last_trc20_wallet))
                    text = '–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å USDT TRC20, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.'
                    bot.send_message(message.chat.id, text, reply_markup=markup)
                    bot.register_next_step_handler(message, send_request_confirmation_sell)
                    user_history.last_request_usdt_sell = round(float(edited_text) / float(exchange_rate), 2)
                    user_history.last_request_uah_sell = edited_text
                    session.commit()
                else:
                    text = f'–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 100 USDT ({min_summa}–≥—Ä–Ω)'
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, enter_uah_sell)
            elif message.text == '/start':
                markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º...', reply_markup=markup)
                start(message)
                return
            else:
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑')
                bot.register_next_step_handler(message, enter_uah_sell)
        else:
            text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É UAH –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            bot.send_message(message.chat.id, text)
            bot.register_next_step_handler(message, enter_uah_sell)


def send_request_confirmation_sell(message):
    if message.text == '/start':
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º...', reply_markup=markup)
        start(message)
        return
    with Session() as session:
        user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
        user_history.last_trc20_wallet = message.text
        session.commit()
        exchange_rate = sh.sheet1.get('B2')[0][0].replace(',', '.')
        last_request_usdt = user_history.last_request_uah_sell
        uah_summa = user_history.last_request_usdt_sell
        markup = types.InlineKeyboardMarkup(row_width=1)
        confirm = types.InlineKeyboardButton('OK', callback_data='confirm_sell')
        cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='back')
        markup.add(confirm, cancel)
        confirmation_text = f'''
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É
–ë–∞–Ω–∫: {banks_sell_calldata.get(user_history.last_bank)}
–ö–æ—à–µ–ª—ë–∫: {user_history.last_trc20_wallet}
–ö—É—Ä—Å: {exchange_rate}
–°—É–º–º–∞ –≤ UAH –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {last_request_usdt}
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {uah_summa}
–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–ø–∞–¥—ë—Ç –∏ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ —Å–Ω–∞—á–∞–ª–∞.
'''
        f = bot.send_message(message.chat.id, confirmation_text, reply_markup=markup)
        user_confirmations_status_sell.append({str(f.from_user.id): False})

        def deleting_confirmation_status_sell(message):
            sleep(30)
            for user_status in user_confirmations_status_sell:
                if str(message.from_user.id) in user_status:
                    markup = types.ReplyKeyboardRemove()
                    text = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ'
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=markup)
                    select_action(message)
                    user_status_index = user_confirmations_status_sell.index(user_status)
                    user_confirmations_status_sell.pop(user_status_index)
                    break

        thr = Thread(target=deleting_confirmation_status_sell, args=(f, ))
        thr.start()


def requisites_uah(message):
    for user_status in user_confirmations_status_sell:
        if str(message.from_user.id) in user_status:
            user_status_index = user_confirmations_status_sell.index(user_status)
            user_confirmations_status_sell.pop(user_status_index)
            break
    with Session() as session:
        user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
        wallets = {'privatbank_sell': "B1",'monobank_sell': "B2", 'pumb_sell': "B3",'else_sell': "B4"}
        markup = types.InlineKeyboardMarkup(row_width=1)
        confirmed_transfer = types.InlineKeyboardButton('–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–µ–Ω—å–≥–∏', callback_data='confirmed_uah_transfer')
        markup.add(confirmed_transfer)
        text = f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{sh.get_worksheet(2).get(wallets.get(user_history.last_bank))[0][0]}`\n–°—É–º–º–∞: {user_history.last_request_uah_sell}'
        f = bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')
        users_status_sell.append({str(f.from_user.id): False})

        def deleting_status_sell(message):
            sleep(30)
            for user_status in users_status_sell:
                if str(message.from_user.id) in user_status:
                    markup = types.ReplyKeyboardRemove()
                    text = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ'
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    bot.send_message(message.chat.id, text, reply_markup=markup)
                    select_action(message)
                    user_status_index = users_status_sell.index(user_status)
                    users_status_sell.pop(user_status_index)
                    break

        thr = Thread(target=deleting_status_sell, args=(f, ))
        thr.start()


def handle_uah(message, id_application):
    if message.photo:
        with Session() as session:
            user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
            exchange_rate = sh.sheet1.get('B2')[0][0].replace(',', '.')
            last_request_uah = user_history.last_request_uah_sell.replace(',', '.')
            create_application = ApplicationsSell(
                id=id_application,
                user_id=message.chat.id,
                bank=banks_sell_calldata.get(user_history.last_bank),
                usdt_rate=exchange_rate,
                wallet=user_history.last_trc20_wallet,
                uah_amount=last_request_uah,
                usdt_amount=round(float(last_request_uah) / float(exchange_rate), 2),
                data_created=datetime.now().strftime('%d.%m.%Y'),
                time_created = datetime.now().strftime('%H:%M:%S'),
                status='in process'
            )
            session.add(create_application)
            session.commit()
            text = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT #{create_application.id}*
–ë–∞–Ω–∫: *{create_application.bank}*
–ö–æ—à–µ–ª—ë–∫: `{create_application.wallet}`
–ö—É—Ä—Å: *{create_application.usdt_rate}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USDT: *{create_application.uah_amount}*
–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ UAH: *{create_application.usdt_amount}*
        '''
        markup = types.InlineKeyboardMarkup(row_width=1)
        agree_transactions = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–±–º–µ–Ω', callback_data=f'agree_transactions_sell{create_application.id}')
        reject_transactions = types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω—è—é –æ–±–º–µ–Ω', callback_data=f'reject_transactions_sell{create_application.id}')
        markup.add(agree_transactions, reject_transactions)
        admins_id = ''
        for admin_chat_id in admins_chat_id:
            admin_message = bot.send_photo(admin_chat_id, message.photo[-1].file_id, caption=text, reply_markup=markup, parse_mode='Markdown')
            admins_id += f'{admin_message.message_id} '
        order_chat_ids = {str(create_application.id): admins_id}
        with open('order_sell_chat_id.json', 'r') as f:
            parse_file = json.loads(f.read())
            parse_file.update(order_chat_ids)
            with open('order_sell_chat_id.json', 'w') as f:
                json.dump(parse_file, f)
        text = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. ID —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏: #{create_application.id}.\n–û–±—ã—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç.'
        bot.send_message(message.chat.id, text)
    elif message.text == '/start':
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, '–í–æ–∑–≤–∞—Ä–∞—â–∞–µ–º...', reply_markup=markup)
        select_action(message)
        return
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤', parse_mode='Markdown')
        bot.register_next_step_handler(message, handle_uah, id_application=id_application)

# –ü—Ä–æ–¥–∞–∂–∞ USDT

def enter_usdt_buy(message):
    with Session() as session:
        if ' ' not in message.text:
            edited_text = message.text.replace(',', '.')
            if message.text.isdigit() or edited_text.count('.') == 1 and all(c.isdigit() for c in edited_text.replace('.', '', 1)):
                min_usdt = 30
                if float(edited_text) >= min_usdt:
                    user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
                    exchange_rate = sh.sheet1.get('A2')[0][0].replace(',', '.')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    if user_history.last_card:
                        markup.add(types.KeyboardButton(user_history.last_card))
                    text = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º UAH.'
                    bot.send_message(message.chat.id, text, reply_markup=markup)
                    bot.register_next_step_handler(message, send_request_confirmation_buy)
                    user_history.last_request_uah_buy = round(float(exchange_rate) * float(edited_text), 2)
                    user_history.last_request_usdt_buy = edited_text
                    session.commit()
                else:
                    text =  '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏ 30 USDT'
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, enter_usdt_buy)
            elif message.text == '/start':
                markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º...', reply_markup=markup)
                start(message)
                return
            else:
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑')
                bot.register_next_step_handler(message, enter_usdt_buy)
        else:
            text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            bot.send_message(message.chat.id, text)
            bot.register_next_step_handler(message, enter_usdt_buy)


def enter_uah_buy(message):
    with Session() as session:
        if ' ' not in message.text:
            user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
            edited_text = message.text.replace(',', '.')
            exchange_rate = sh.sheet1.get('A2')[0][0].replace(',', '.')
            if message.text.isdigit() or edited_text.count('.') == 1 and all(c.isdigit() for c in edited_text.replace('.', '', 1)):
                min_request = 30
                min_summa = round(min_request * float(exchange_rate), 2)
                if float(edited_text) >= min_summa:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    if user_history.last_card:
                        markup.add(types.KeyboardButton(user_history.last_card))
                    text = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º UAH.'
                    bot.send_message(message.chat.id, text, reply_markup=markup)
                    bot.register_next_step_handler(message, send_request_confirmation_buy)
                    user_history.last_request_usdt_buy = round(float(edited_text) / float(exchange_rate), 2)
                    user_history.last_request_uah_buy = edited_text
                    session.commit()
                else:
                    text = f'–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ 30 USDT ({min_summa}–≥—Ä–Ω)'
                    bot.send_message(message.chat.id, text)
                    bot.register_next_step_handler(message, enter_uah_buy)
            elif message.text == '/start':
                markup = types.ReplyKeyboardRemove()
                bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º...', reply_markup=markup)
                start(message)
                return
            else:
                bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑')
                bot.register_next_step_handler(message, enter_uah_buy)
        else:
            text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É UAH –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
            bot.send_message(message.chat.id, text)
            bot.register_next_step_handler(message, enter_uah_buy)


def send_request_confirmation_buy(message):
    message_text = message.text.replace(' ', '')
    with Session() as session:
        if len(message_text) == 16:
            if message_text.isdigit():
                user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
                user_history.last_card = message.text
                session.commit()
                exchange_rate = sh.sheet1.get('A2')[0][0].replace(',', '.')
                last_request_usdt = user_history.last_request_usdt_buy
                uah_summa = user_history.last_request_uah_buy
                markup = types.InlineKeyboardMarkup(row_width=1)
                confirm = types.InlineKeyboardButton('OK', callback_data='confirm_buy')
                cancel = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='back')
                markup.add(confirm, cancel)
                confirmation_text = f'''
–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É
–ë–∞–Ω–∫: {banks_buy_calldata.get(user_history.last_bank)}
–†–µ–∫–≤–µ–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {user_history.last_card}
–ö—É—Ä—Å: {exchange_rate}
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ USDT –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {last_request_usdt}
–°—É–º–º–∞ –≤ UAH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: {uah_summa}
–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–ø–∞–¥—ë—Ç –∏ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ —Å–Ω–∞—á–∞–ª–∞.'''
                f = bot.send_message(message.chat.id, confirmation_text, reply_markup=markup)
                user_confirmations_status_buy.append({str(f.from_user.id): False})

                def deleting_confirmation_status_buy(message):
                    sleep(30)
                    for user_status in user_confirmations_status_buy:
                        if str(message.from_user.id) in user_status:
                            markup = types.ReplyKeyboardRemove()
                            text = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ'
                            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                            bot.send_message(message.chat.id, text, reply_markup=markup)
                            select_action(message)
                            user_status_index = user_confirmations_status_buy.index(user_status)
                            user_confirmations_status_buy.pop(user_status_index)
                            break

                thr = Thread(target=deleting_confirmation_status_buy, args=(f, ))
                thr.start()
            else:
                bot.send_message(message.chat.id, '–£–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—ã')
                bot.register_next_step_handler(message, send_request_confirmation_buy)
        elif message.text == '/start':
                markup = types.ReplyKeyboardRemove()
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º...', reply_markup=markup)
                start(message)
                return
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å–≤–æ—é –∫–∞—Ä—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É –µ—â—ë —Ä–∞–∑')
            bot.register_next_step_handler(message, send_request_confirmation_buy)


def requisites_usdt(message):
    for user_status in user_confirmations_status_buy:
        if str(message.from_user.id) in user_status:
            user_status_index = user_confirmations_status_buy.index(user_status)
            user_confirmations_status_buy.pop(user_status_index)
            break
    with Session() as session:
        user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
        markup = types.InlineKeyboardMarkup(row_width=1)
        confirmed_transfer = types.InlineKeyboardButton('–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–µ–Ω—å–≥–∏', callback_data='confirmed_usdt_transfer')
        markup.add(confirmed_transfer)
        text = f'–ê–¥—Ä–µ—Å—Å USDT –∫–æ—à–µ–ª—å–∫–∞: `{sh.get_worksheet(1).get("B1")[0][0]}`\n–°—É–º–º–∞: {user_history.last_request_usdt_buy}'
        f = bot.send_message(message.chat.id, text, reply_markup=markup, parse_mode='Markdown')
        users_status_buy.append({str(f.from_user.id): False})

        def deleting_status_buy(message):
            sleep(30)
            for user_status in users_status_buy:
                if str(message.from_user.id) in user_status:
                    markup = types.ReplyKeyboardRemove()
                    text = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ'
                    bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                    bot.send_message(message.chat.id, text, reply_markup=markup)
                    select_action(message)
                    user_status_index = users_status_buy.index(user_status)
                    users_status_buy.pop(user_status_index)
                    break
            
        thr = Thread(target=deleting_status_buy, args=(f, ))
        thr.start()


def handle_txid(message, id_application):
    with Session() as session:
        if message.text == '/start':
            markup = types.ReplyKeyboardRemove()
            bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            select_action(message)
            return
        user_history = session.query(UserHistory).filter(UserHistory.id==message.chat.id).first()
        exchange_rate = sh.sheet1.get('A2')[0][0].replace(',', '.')
        last_request_usdt = user_history.last_request_usdt_buy.replace(',', '.')
        create_application = ApplicationsBuy(
            id=id_application,
            user_id=message.chat.id,
            txid=message.text,
            bank=banks_buy_calldata.get(user_history.last_bank),
            usdt_rate=exchange_rate,
            credit_card=user_history.last_card,
            usdt_amount=last_request_usdt,
            uah_summa=round(float(exchange_rate) * float(last_request_usdt), 2),
            data_created=datetime.now().strftime('%d.%m.%Y'),
            time_created = datetime.now().strftime('%H:%M:%S'),
            status='in process'
        )
        session.add(create_application)
        session.commit()
        text = f'''
*–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT #{create_application.id}*
–ë–∞–Ω–∫: *{create_application.bank}*
–°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: `{create_application.credit_card}`
–ö—É—Ä—Å: *{create_application.usdt_rate}*
–ö–æ–ª–∏—á–µ–≤—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ USDT: *{create_application.usdt_amount}*
–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ UAH: *{create_application.uah_summa}*
TXid —Å–¥–µ–ª–∫–∏: *{create_application.txid}*
    '''
        markup = types.InlineKeyboardMarkup(row_width=1)
        agree_transactions = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–±–º–µ–Ω', callback_data=f'agree_transactions_buy{create_application.id}')
        reject_transactions = types.InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω—è—é –æ–±–º–µ–Ω', callback_data=f'reject_transactions_buy{create_application.id}')
        markup.add(agree_transactions, reject_transactions)
        admins_id = ''
        for admin_chat_id in admins_chat_id:
            a = bot.send_message(admin_chat_id, text, reply_markup=markup, parse_mode='Markdown')
            admins_id += f'{a.message_id} '
        order_chat_ids = {str(create_application.id): admins_id}
        with open('order_buy_chat_id.json', 'r') as f:
            parse_file = json.loads(f.read())
            parse_file.update(order_chat_ids)
            with open('order_buy_chat_id.json', 'w') as f:
                json.dump(parse_file, f)
        text = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –û–±—ã—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç. ID —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏: #{create_application.id}'
        bot.send_message(message.chat.id, text)

#–§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞—é—â–∞—è –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
def data_upload():
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
    with Session() as session:
        todays_sell_applications = session.query(ApplicationsSell).filter(
            ApplicationsSell.data_created==datetime.now().strftime('%d.%m.%Y'),
            ApplicationsSell.status=='approved').all()

        worksheet = sh.get_worksheet(3)
        column_a = worksheet.col_values(1)
        clear_sheet = len(column_a) + 1

        # –í—ã–≥—Ä—É–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É USDT
        data = []
        for application in todays_sell_applications:
            row_data = [f'{application.id}', f'{application.bank}', f'{application.wallet}',
                        f'{application.data_created}', f'{application.time_created}',
                        f'{application.usdt_rate}', '–ø—Ä–æ–¥–∞–∂–∞']
            data.append(row_data)

        num_rows = len(data)
        cell_range = f'A{clear_sheet}:G{clear_sheet + num_rows - 1}'

        worksheet.update(cell_range, data)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        todays_buy_applications = session.query(ApplicationsBuy).filter(
            ApplicationsBuy.data_created==datetime.now().strftime('%d.%m.%Y'),
            ApplicationsBuy.status=='approved').all()

        # –í—ã–≥—Ä—É–∑–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É USDT
        column_a = worksheet.col_values(1)
        clear_sheet = len(column_a) + 1
        data = []
        for application in todays_buy_applications:
            row_data = [f'{application.id}', f'{application.bank}', f'{application.credit_card}',
                        f'{application.data_created}', f'{application.time_created}',
                        f'{application.usdt_rate}', '–ø–æ–∫—É–ø–∫–∞']
            data.append(row_data)

        num_rows = len(data)
        cell_range = f'A{clear_sheet}:G{clear_sheet + num_rows - 1}'

        worksheet.update(cell_range, data)
        
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç data_upload –≤ 23:59 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
schedule.every().day.at("23:59:00").do(data_upload)

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
def run_schedule():
    while True:
        schedule.run_pending()
        sleep(1)

# –ó–∞–ø—É—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
second_flow = Thread(target=run_schedule)
second_flow.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)